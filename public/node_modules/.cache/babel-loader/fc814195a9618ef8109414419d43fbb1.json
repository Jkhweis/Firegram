{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = collectionName => {\n  const [docs, setDocs] = useState([]);\n  useEffect(() => {\n    const unsub = getFirestore().collection(collection).orderBy('createdAt', 'desc').onSnapshot(snap => {\n      let documents = [];\n      snap.forEach(doc => {\n        documents.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setDocs(documents);\n    });\n    return () => unsub(); // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n  return {\n    docs\n  };\n};\n\nexport default useFirestore;","map":{"version":3,"sources":["/Users/joykhalil/Desktop/React Projects/firegram/src/hooks/useFirestore.js"],"names":["useState","useEffect","onSnapshot","collection","projectFirestore","useFirestore","collectionName","docs","setDocs","unsub","getFirestore","orderBy","snap","documents","forEach","doc","push","data","id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,YAAY,GAAIC,cAAD,IAAoB;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,KAAK,GAAGC,YAAY,GACvBP,UADW,CACAA,UADA,EAEXQ,OAFW,CAEH,WAFG,EAEU,MAFV,EAGXT,UAHW,CAGCU,IAAD,IAAU;AACpB,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,QAAAA,SAAS,CAACG,IAAV,CAAe,EAAE,GAAGD,GAAG,CAACE,IAAJ,EAAL;AAAiBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAzB,SAAf;AACD,OAFD;AAGAV,MAAAA,OAAO,CAACK,SAAD,CAAP;AACD,KATW,CAAd;AAWA,WAAO,MAAMJ,KAAK,EAAlB,CAZc,CAad;AACA;AACD,GAfQ,EAeN,CAACN,UAAD,CAfM,CAAT;AAiBA,SAAO;AAAEI,IAAAA;AAAF,GAAP;AACD,CArBD;;AAsBA,eAAeF,YAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collectionName) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = getFirestore()\n      .collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snap) => {\n        let documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n\n  return { docs };\n};\nexport default useFirestore;\n"]},"metadata":{},"sourceType":"module"}