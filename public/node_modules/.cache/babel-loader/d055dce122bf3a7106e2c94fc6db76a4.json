{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\nimport { addDoc } from 'firebase/firestore';\nimport { collection } from 'firebase/firestore';\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    const storageRef = ref(projectStorage, file.name);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    const collectionRef = collection(projectFirestore, 'images');\n    uploadTask.on('state_changed', snapshot => {\n      let percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, () => {\n      const createdAt = timestamp;\n      getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n        console.log('File available at', downloadURL);\n        await addDoc(collectionRef, {\n          url: downloadURL,\n          createdAt\n        });\n        setUrl(downloadURL);\n      });\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["/Users/joykhalil/Desktop/React Projects/firegram/src/hooks/useStorage.js"],"names":["useState","useEffect","ref","uploadBytesResumable","getDownloadURL","projectStorage","projectFirestore","timestamp","addDoc","collection","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","name","uploadTask","collectionRef","on","snapshot","percentage","bytesTransferred","totalBytes","err","createdAt","then","downloadURL","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,oBAAd,EAAoCC,cAApC,QAA0D,kBAA1D;AACA,SACEC,cADF,EAEEC,gBAFF,EAGEC,SAHF,QAIO,oBAJP;AAKA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACgB,GAAD,EAAMC,MAAN,IAAgBjB,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,UAAU,GAAGhB,GAAG,CAACG,cAAD,EAAiBM,IAAI,CAACQ,IAAtB,CAAtB;AACA,UAAMC,UAAU,GAAGjB,oBAAoB,CAACe,UAAD,EAAaP,IAAb,CAAvC;AACA,UAAMU,aAAa,GAAGZ,UAAU,CAACH,gBAAD,EAAmB,QAAnB,CAAhC;AAEAc,IAAAA,UAAU,CAACE,EAAX,CACE,eADF,EAEGC,QAAD,IAAc;AACZ,UAAIC,UAAU,GACXD,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GADtD;AAEAb,MAAAA,WAAW,CAACW,UAAD,CAAX;AACD,KANH,EAOGG,GAAD,IAAS;AACPZ,MAAAA,QAAQ,CAACY,GAAD,CAAR;AACD,KATH,EAUE,MAAM;AACJ,YAAMC,SAAS,GAAGrB,SAAlB;AACAH,MAAAA,cAAc,CAACgB,UAAU,CAACG,QAAX,CAAoBrB,GAArB,CAAd,CAAwC2B,IAAxC,CAA6C,MAAOC,WAAP,IAAuB;AAClEC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,WAAjC;AACA,cAAMtB,MAAM,CAACa,aAAD,EAAgB;AAAEL,UAAAA,GAAG,EAAEc,WAAP;AAAoBF,UAAAA;AAApB,SAAhB,CAAZ;AACAX,QAAAA,MAAM,CAACa,WAAD,CAAN;AACD,OAJD;AAKD,KAjBH;AAmBD,GAxBQ,EAwBN,CAACnB,IAAD,CAxBM,CAAT;AA0BA,SAAO;AAAEC,IAAAA,QAAF;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAP;AACD,CAhCD;;AAkCA,eAAeJ,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport {\n  projectStorage,\n  projectFirestore,\n  timestamp,\n} from '../firebase/config';\nimport { addDoc } from 'firebase/firestore';\nimport { collection } from 'firebase/firestore';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    const storageRef = ref(projectStorage, file.name);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    const collectionRef = collection(projectFirestore, 'images');\n\n    uploadTask.on(\n      'state_changed',\n      (snapshot) => {\n        let percentage =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n      () => {\n        const createdAt = timestamp;\n        getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n          console.log('File available at', downloadURL);\n          await addDoc(collectionRef, { url: downloadURL, createdAt });\n          setUrl(downloadURL);\n        });\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n"]},"metadata":{},"sourceType":"module"}